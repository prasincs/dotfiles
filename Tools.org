* Tools I use
<2015-08-06 Thu>

fzf: Fuzzy Finder
tmux
Emacs with Prelude setup: prasincs/emacs-prelude repository
zsh with oh-my-zsh

* Resources on some Fundamentals

+ How Keyboard I/O works
http://unix.stackexchange.com/questions/116629/how-do-keyboard-input-and-text-output-work/116630#116630

* Tmux

**  Switching directly to windows from anywhere
ctrl-b s to get list of all running tmux sessions, Press Space to get list of all windows in sessions


** Tmuxinator

- Creating New: =tmuxinator new <name>=

** FInding window

- Ctrl-b f <window name>
- Ctrl-b w [Lists all the windows]
- Ctrl-b s [Lists all the sessions] and on pressing Space, expands to windows

** Fullscreen
:resize-pane -Z

If you switch to another pane, it will minimize itself
** Color palette
http://superuser.com/questions/285381/how-does-the-tmux-color-palette-work

Listing available colors in tmux

#+BEGIN_SRC
for i in {0..255} ; do
    printf "\x1b[38;5;${i}mcolour${i}\n"
done
#+END_SRC

* FZF

** Using the finder

CTRL-J / CTRL-K (or CTRL-N / CTRL-P) to move cursor up and down
Enter key to select the item, CTRL-C / CTRL-G / ESC to exit
On multi-select mode (-m), TAB and Shift-TAB to mark multiple items
Emacs style key bindings
Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode


** Searching for items using ag and filtering

ag "tmux" | fzf


** Allowing extended search/selection

Add the following environment variable

export FZF_DEFAULT_OPTS=--extended


* Perl

** Oneliners printing regex matches

For example: for printing the IP address for a certain interface.

ifconfig | grep -A1 eth1 | perl -lne 'print $1 if /inet addr:(\S+)/'

* Shell (Bash/Zsh)

** Zsh

- Uses zle instead of readline which is lot more powerful

Resources:
+ Reference Card: http://www.bash2zsh.com/zsh_refcard/refcard.pdf
+ http://zshwiki.org/home/zle/bindkeys

*** Keyboard Macros

Although keyboard macros don't work in ZSH in the same way as they do in
bash, there are still ways to make it work. I was able to find and modify
a script from http://enki-tech.blogspot.fr/2012/08/zsh-macros.html

to get somewhat workable flow for OSX setup, there are some very specific
changes that OSX makes to mktemp that weren't accomodated in the script

And, you can use =MX= to execute the last macro as oppose to =e= which is
mapped to emacs for some reason on my machine.


*** Key Bindings

https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/key-bindings.zsh

Finding all the keybindings currently in the shell

=bindkey -L=

To read the keybinding for some key combination.. use the =read= command.

#+BEGIN_SRC
read
#+END_SRC
And press F10, to get

#+BEGIN_SRC
^[[21~
#+END_SRC

And so on.

You can use to map particular key sequences to shell functions. For example,
if you want to map =M-m= to copy the previous word, you can do that using
#+BEGIN_SRC
bindkey "^[m" copy-prev-shell-word
#+END_SRC

*** Removing duplicates from history

awk -i inplace '!x[$0]++' ~/.zsh_history

** Bash

*** Style Guides

http://redsymbol.net/articles/unofficial-bash-strict-mode/

*** Keyboard Macros

Unfortunately zsh doesn't seem to support this

You can add a keyboard macro by typing C-x ( <commands> C-x )
and then replay it using C-x e

*** Editing

http://www.scribd.com/doc/985254/Bash-Emacs-Editing-Mode-readline-Cheat-Sheet

** Deleting words

M-d -> delete the next word |delete
C-w -> delete the last word delete|


** Fail on first non-zero exit
Start the script with =/bin/bash -e=

** Get non-zero status if one of the pipe commands fails
=set -o pipefail=

* Golang
http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/

** Setting up Cross compiling

Go to where go source is. Generally at /usr/local/go/src

Then compile for the target.

sudo GOOS=linux GOARCH=386 CGO_ENABLED=0 ./make.bash

* Git
** Get to root level

git config --global alias.root "rev-parse --show-toplevel"

Then you can use git root to go to the top directory from anywhere
** Branching Model
http://nvie.com/posts/a-successful-git-branching-model/
* Apt
** Finding more about the package repository
apt-cache madison <packagename>

will show you all the available package versions in the repositories.
* Byobu
https://gist.github.com/jshaw/5255721
* Networking
- Latency times between large cities
https://wondernetwork.com/pings/

* Latency
http://computers-are-fast.github.io/
* OSX
** Making a RAM Disk
Size => Size of Disk in MB * 2048
diskutil erasevolume HFS+ 'RAM Disk' `hdiutil attach -nomount ram://8388608`
